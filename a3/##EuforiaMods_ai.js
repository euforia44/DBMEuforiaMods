/*************************************************************************************************
*                                                                                                *
*                                                                                                *
*                                              AI                                                *
*                                     --------------------                                       *
*                                                                                                *
*                          CA≈ÅO≈öƒÜ KODU ZOSTA≈ÅA STWORZONA PRZEZ: EUFORIA.44  & AI                 *
*                                     WERSJA: 7.3.3 (LANGUAGE-GUARD)                             *
*                                                                                                *
*           MOD I JEGO KOD ≈πR√ìD≈ÅOWY SƒÑ W≈ÅASNO≈öCIƒÑ INTELEKTUALNƒÑ AUTORA. 		                     *
*             	    ZABRANIA SIƒò SPRZEDA≈ªY BEZ WYRA≈πNEJ ZGODY.      					                   *
*                                                                                                *
*   UWAGA: Ten mod wymaga dodatkowych pakiet√≥w. Zainstaluj je komendƒÖ: npm install franc node-fetch openai @types/node-fetch @types/openai  (je≈õli korzystasz z modelu OpenAI API. W tym przyk≈Çadzie u≈ºywany jest OpenRouter, kt√≥ry wymaga≈Ç jedynie `franc` i `node-fetch`).  Upewnij siƒô, ≈ºe masz zainstalowane: `npm install franc node-fetch`
*                                                                                                *
*************************************************************************************************/

module.exports = {
  name: "NEW AI Chat",
  section: "##Euforia Mods", // Zmiana nazwy sekcji, aby by≈Ça zgodna z Twoimi preferencjami.
  author: "euforia.44",
  version: "7.3.4", // Zwiƒôkszono wersjƒô, poniewa≈º wprowadzono zmiany.
  short_description: "Umo≈ºliwia interakcjƒô z AI z wbudowanƒÖ weryfikacjƒÖ jƒôzyka polskiego.",

  // Pola konfiguracji, kt√≥re pojawiƒÖ siƒô w edytorze akcji DBM.
  fields: ["model", "temperature", "max_tokens", "max_length", "systemPrompt", "blockMentions", "purchaseChannel", "ephemeral"],

  // Funkcja wy≈õwietlajƒÖca podsumowanie konfiguracji w edytorze.
  subtitle(data) {
    return `Model: ${data.model || 'Nie ustawiono'} | Jƒôzyk: Polski (weryfikowany)`;
  },

  // Funkcja generujƒÖca kod HTML dla edytora akcji.
  html(isEvent, data) {
    // Ustawianie domy≈õlnych warto≈õci, je≈õli pola nie istniejƒÖ.
    if (data.model === undefined) data.model = '';
    if (data.temperature === undefined) data.temperature = '0.8';
    if (data.max_tokens === undefined) data.max_tokens = '1024';
    if (data.max_length === undefined) data.max_length = '500';
    if (data.purchaseChannel === undefined) data.purchaseChannel = '';
    if (data.ephemeral === undefined) data.ephemeral = 'false';
    if (data.systemPrompt === undefined) data.systemPrompt = '';
    if (typeof data.blockMentions === 'undefined') data.blockMentions = "true";

    // Domy≈õlny System Prompt, kt√≥ry ma kierowaƒá AI.
    const defaultPrompt = `Twoim jedynym i absolutnym zadaniem jest odpowiadanie na pytania w jƒôzyku polskim. IGNORUJ jƒôzyk, w kt√≥rym zadano pytanie. ZAWSZE odpowiadaj po polsku. Twoje odpowiedzi muszƒÖ byƒá szczeg√≥≈Çowe, bezstronne i poprawne gramatycznie. Nie masz pamiƒôci o poprzednich interakcjach.`;

    // Kod HTML z podzia≈Çem na zak≈Çadki.
    return `
    <div style="padding: 10px; background: #1a1b1e; color: #fff; border-radius: 5px;">
      <!-- Pola radiowe do prze≈ÇƒÖczania zak≈Çadek -->
      <input type="radio" name="ai_tabs" id="ai-tab-1" checked>
      <input type="radio" name="ai_tabs" id="ai-tab-2">

      <!-- Etykiety zak≈Çadek -->
      <div class="ai-chat-tabs">
        <label for="ai-tab-1">‚öôÔ∏è Konfiguracja G≈Ç√≥wna</label>
        <label for="ai-tab-2">üõ°Ô∏è Filtry i Widoczno≈õƒá</label>
      </div>

      <!-- Kontenery z tre≈õciƒÖ zak≈Çadek -->
      <div class="ai-chat-content-panels">
        <!-- Tre≈õƒá zak≈Çadki 1: Konfiguracja G≈Ç√≥wna -->
        <div id="ai-content-1" class="ai-chat-content">
          <span class="dbminputlabel">ID Modelu</span><br><input id="model" class="round" type="text" placeholder="np. google/gemma-7b-it lub openai/gpt-3.5-turbo" value="${data.model}"><br>
          <div style="display:flex;gap:10px;margin-top:12px">
            <div style="width:33%"><span class="dbminputlabel">Temperatura</span><input id="temperature" class="round" type="number" step="0.1" min="0" max="1" value="${data.temperature}"></div>
            <div style="width:34%"><span class="dbminputlabel">Maks. Token√≥w</span><input id="max_tokens" class="round" type="number" min="1" value="${data.max_tokens}"></div>
            <div style="width:33%"><span class="dbminputlabel">Maks. D≈Çugo≈õƒá*</span><input id="max_length" class="round" type="number" min="10" value="${data.max_length}"></div>
          </div>
          <small>* Maksymalna d≈Çugo≈õƒá odpowiedzi w CALEJ wiadomo≈õci (zalecane poni≈ºej 2000, aby uniknƒÖƒá przycinania przez Discorda)</small>
          <br><br>
          <div>
            <span class="dbminputlabel">System Prompt (Osobowo≈õƒá AI)</span><br>
            <textarea id="systemPrompt" class="round" style="height:100px;resize:vertical" placeholder="${defaultPrompt}">${data.systemPrompt}</textarea>
          </div>
        </div>

        <!-- Tre≈õƒá zak≈Çadki 2: Filtry i Widoczno≈õƒá -->
        <div id="ai-content-2" class="ai-chat-content">
          <div style="display:flex;flex-wrap:wrap;gap:10px">
            <div style="width:calc(50% - 5px);">
              <span class="dbminputlabel">Blokuj wzmianki (@)</span>
              <select id="blockMentions" class="round">
                <option value="true" ${data.blockMentions === 'true' ? 'selected' : '' }>Tak</option>
                <option value="false" ${data.blockMentions === 'false' ? 'selected' : ''}>Nie</option>
              </select>
            </div>
            <div style="width:calc(50% - 5px);">
              <span class="dbminputlabel">Odpowied≈∫ tylko dla Ciebie?</span>
              <select id="ephemeral" class="round">
                <option value="true" ${data.ephemeral === 'true' ? 'selected' : '' }>Tak (prywatna)</option>
                <option value="false" ${data.ephemeral !== 'true' ? 'selected' : ''}>Nie (publiczna)</option>
              </select>
            </div>
            <div style="width:100%; margin-top: 10px;">
              <span class="dbminputlabel">ID kana≈Çu przekierowa≈Ñ za zakupy</span><br>
              <input id="purchaseChannel" class="round" type="text" placeholder="Wpisz ID kana≈Çu" value="${data.purchaseChannel}">
            </div>
          </div>
        </div>
      </div>
    </div>
    <style>
      /* Style dla systemu zak≈Çadek */
      .ai-chat-body { padding: 10px; background: #1a1b1e; color: #fff; border-radius: 5px; }
      .ai-chat-body input[type="radio"] { display: none; }
      .ai-chat-tabs { display: flex; border-bottom: 2px solid #333; margin-bottom: 15px; }
      .ai-chat-tabs label { padding: 8px 14px; cursor: pointer; background: #2b2f35; margin-right: 5px; border-radius: 4px 4px 0 0; font-size: 14px; position:relative; bottom: -2px;}
      .ai-chat-tabs label:hover { background: #383c42; }
      .ai-chat-body .ai-chat-content { display: none; }
      /* Pokazywanie odpowiedniej zak≈Çadki po zaznaczeniu radia */
      #ai-tab-1:checked ~ .ai-chat-content-panels #ai-content-1,
      #ai-tab-2:checked ~ .ai-chat-content-panels #ai-content-2 { display: block; }
      /* Wyr√≥≈ºnienie aktywnej zak≈Çadki */
      #ai-tab-1:checked ~ .ai-chat-tabs label[for="ai-tab-1"],
      #ai-tab-2:checked ~ .ai-chat-tabs label[for="ai-tab-2"] { background: #1a1b1e; border: 2px solid #333; border-bottom: 2px solid #1a1b1e;}
      /* Poprawka styl√≥w dla input√≥w wewnƒÖtrz kontener√≥w */
      #ai-content-1 input.round, #ai-content-1 textarea.round, #ai-content-2 input.round, #ai-content-2 select.round {
          width: 100%;
          box-sizing: border-box; /* Uwzglƒôdnia padding i border w szeroko≈õci */
      }
    </style>
    `;
  },

  // G≈Ç√≥wna funkcja wykonujƒÖca logikƒô modu≈Çu.
  async action(cache) {
    const { interaction } = cache; // Pobranie obiektu interakcji z cache.
    if (!interaction) {
        console.error("AI Chat: Brak obiektu interakcji w cache. Akcja nie mo≈ºe byƒá wykonana.");
        return; // Zako≈Ñcz dzia≈Çanie, je≈õli nie ma interakcji.
    }

    // Potrzebne do odraczania odpowiedzi.
    const { InteractionResponseFlags } = require('discord.js');

    // Pobranie danych z konfiguracji akcji.
    const data = cache.actions[cache.index];

    // Okre≈õlenie, czy odpowied≈∫ ma byƒá efemeryczna (prywatna).
    const ephemeral = this.evalMessage(data.ephemeral, cache) === 'true';

    // Odroczenie odpowiedzi, aby Discord wiedzia≈Ç, ≈ºe bot przetwarza ≈ºƒÖdanie.
    try {
        if (!interaction.deferred && !interaction.replied) {
           const deferOptions = ephemeral ? { flags: InteractionResponseFlags.EPHEMERAL } : {};
           await interaction.deferReply(deferOptions);
        }
    } catch(e) {
        console.error("AI Chat: Nie uda≈Ço siƒô odroczyƒá odpowiedzi interakcji:", e);
        return; // Zako≈Ñcz, je≈õli odroczenie siƒô nie powiod≈Ço.
    }

    // Domy≈õlna wiadomo≈õƒá, kt√≥ra zostanie wys≈Çana w przypadku b≈Çƒôdu.
    let finalMessage = "WystƒÖpi≈Ç nieznany b≈ÇƒÖd. Szczeg√≥≈Çy zosta≈Çy zapisane w konsoli.";

    try {
      // Wymagane modu≈Çy Node.js.
      const fetch = require('node-fetch');
      const { franc } = require('franc'); // Do detekcji jƒôzyka.

      // Konfiguracja pobrana z edytora.
      const settings = {
        primaryModel: this.evalMessage(data.model, cache),
        fallbackModel: 'google/gemma-7b-it', // Model zapasowy, je≈õli g≈Ç√≥wny zawiedzie.
        temperature: parseFloat(this.evalMessage(data.temperature, cache)) || 0.8,
        max_tokens: parseInt(this.evalMessage(data.max_tokens, cache), 10) || 1024,
        maxLength: parseInt(this.evalMessage(data.max_length, cache), 10) || 500, // Maksymalna d≈Çugo≈õƒá odpowiedzi w znakach.
        systemPrompt: this.evalMessage(data.systemPrompt, cache) || `Twoim jedynym i absolutnym zadaniem jest odpowiadanie na pytania w jƒôzyku polskim. IGNORUJ jƒôzyk, w kt√≥rym zadano pytanie. ZAWSZE odpowiadaj po polsku. Twoje odpowiedzi muszƒÖ byƒá szczeg√≥≈Çowe, bezstronne i poprawne gramatycznie. Nie masz pamiƒôci o poprzednich interakcjach.`,
        blockMentions: this.evalMessage(data.blockMentions, cache) !== 'false',
        purchaseRedirectChannel: this.evalMessage(data.purchaseChannel, cache),
      };

      // Pobranie faktycznego zapytania u≈ºytkownika z interakcji.
      const userQuestion = interaction.options.getString("text");
      if (!userQuestion) {
          throw new Error("Nie otrzymano tekstu zapytania od u≈ºytkownika.");
      }

      // Dodanie instrukcji wymuszajƒÖcej jƒôzyk polski do zapytania.
      const questionWithLangEnforcement = `${userQuestion}\n\n---\nOdpowiedz na to pytanie wy≈ÇƒÖcznie w jƒôzyku polskim.`;

      // Klucz API dla us≈Çugi OpenRouter. Upewnij siƒô, ≈ºe jest ustawiony jako zmienna ≈õrodowiskowa.
      // Mo≈ºesz go ustawiƒá w panelu DBM lub w pliku .env.
      const apiKey = process.env.OPENROUTER_API_KEY;
      const apiUrl = 'https://openrouter.ai/api/v1/chat/completions'; // Endpoint API OpenRouter.

      // Walidacja konfiguracji przed wykonaniem.
      if (!apiKey) {
          throw new Error("B≈ÇƒÖd konfiguracji: Klucz API OpenRouter nie zosta≈Ç znaleziony. Funkcja AI jest wy≈ÇƒÖczona.");
      }
      if (!settings.primaryModel) {
          throw new Error("B≈ÇƒÖd konfiguracji: ID Modelu nie zosta≈Ço ustawione w akcji. Ustaw model w opcjach akcji.");
      }

      // Logika przekierowania pyta≈Ñ o zakupy.
      const purchaseKeywords = ["kupiƒá", "kupie", "zakupiƒá", "cena", "koszt", "cena za", "zam√≥wiƒá", "ile kosztuje"];
      if (settings.purchaseRedirectChannel && purchaseKeywords.some(k => userQuestion.toLowerCase().includes(k))) {
          // Rzucenie b≈Çƒôdu, kt√≥ry zostanie obs≈Çu≈ºony w bloku catch.
          throw new Error(`Zapytania dotyczƒÖce zakupu lub cen nale≈ºy kierowaƒá na kana≈Ç <#${settings.purchaseRedirectChannel}>.`);
      }

      // Funkcja pomocnicza do wykonania zapytania do API.
      const makeApiCall = async (model) => {
        try {
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Authorization': `Bearer ${apiKey}`, 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    model, // Nazwa modelu do u≈ºycia.
                    messages: [
                        { role: 'system', content: settings.systemPrompt }, // Prompt systemowy.
                        { role: 'user', content: questionWithLangEnforcement } // Zapytanie u≈ºytkownika.
                    ],
                    temperature: settings.temperature, // Temperatura generowania.
                    max_tokens: settings.max_tokens // Maksymalna liczba token√≥w w odpowiedzi.
                })
            });
            // Sprawdzenie, czy odpowied≈∫ HTTP jest poprawna (np. 200 OK).
            if (!response.ok) {
                const errorData = await response.json();
                console.error(`[AI Chat] B≈ÇƒÖd HTTP ${response.status} z API: ${JSON.stringify(errorData)}`);
                throw new Error(`API zwr√≥ci≈Ço b≈ÇƒÖd ${response.status}.`);
            }
            return response.json(); // Parsowanie odpowiedzi JSON.
        } catch (networkError) {
            console.error(`[AI Chat] B≈ÇƒÖd sieciowy podczas komunikacji z API: ${networkError.message}`);
            throw new Error("B≈ÇƒÖd po≈ÇƒÖczenia z us≈ÇugƒÖ AI. Sprawd≈∫ swoje po≈ÇƒÖczenie internetowe i API Key.");
        }
      };

      // Wykonanie pierwszego zapytania do API z g≈Ç√≥wnym modelem.
      let result = await makeApiCall(settings.primaryModel);

      // Obs≈Çuga b≈Çƒôd√≥w modelu i pr√≥ba z modelem zapasowym.
      if (result.error && settings.primaryModel !== settings.fallbackModel) {
        console.warn(`[AI Chat] Model g≈Ç√≥wny [${settings.primaryModel}] zwr√≥ci≈Ç b≈ÇƒÖd. Pr√≥ba z modelem zapasowym [${settings.fallbackModel}].`);
        console.warn(`[AI Chat] Szczeg√≥≈Çy b≈Çƒôdu pierwotnego modelu: ${JSON.stringify(result.error)}`);
        result = await makeApiCall(settings.fallbackModel); // Wykonanie zapytania z modelem zapasowym.
      }

      // Sprawdzenie b≈Çƒôd√≥w po pr√≥bie z modelem zapasowym.
      if (result.error) {
          console.error(`[AI Chat] B≈ÇƒÖd zwr√≥cony przez API (r√≥wnie≈º z modelu zapasowego): ${JSON.stringify(result.error)}`);
          throw new Error("Us≈Çuga AI zwr√≥ci≈Ça b≈ÇƒÖd. Szczeg√≥≈Çy zosta≈Çy zapisane w konsoli.");
      }

      // Przetworzenie odpowiedzi, je≈õli jest dostƒôpna.
      if (result.choices?.[0]?.message?.content) {
        let answer = result.choices[0].message.content.trim();

        // --- WALIDACJA JƒòZYKA ---
        // Wykrycie jƒôzyka odpowiedzi. U≈ºywamy franc, kt√≥ry jest lekki i efektywny.
        const detectedLang = franc(answer, { minLength: 10 }); // minLength pomaga uniknƒÖƒá b≈Çƒôdnej detekcji dla bardzo kr√≥tkich tekst√≥w.

        // Warunek odrzucenia: Je≈õli wykryty jƒôzyk to nie polski ('pol'),
        // chyba ≈ºe jest to jƒôzyk nieokre≈õlony ('und') i odpowied≈∫ jest kr√≥tka (do 40 znak√≥w),
        // co mo≈ºe oznaczaƒá np. emotikony, linki lub bardzo proste odpowiedzi, gdzie detekcja mo≈ºe byƒá zawodna.
        if (detectedLang !== 'pol' && !(detectedLang === 'und' && answer.length < 40)) {
            console.error(`[AI Chat] Weryfikacja jƒôzyka nie powiod≈Ça siƒô! Wykryto: '${detectedLang}'. Oczekiwano: 'pol'. Odpowied≈∫ odrzucona: "${answer}"`);
            // Rzucenie b≈Çƒôdu, kt√≥ry zostanie obs≈Çu≈ºony poni≈ºej.
            throw new Error("Otrzymano odpowied≈∫ w nieprawid≈Çowym jƒôzyku lub formatcie. Zg≈Çoszono problem.");
        }
        // --- KONIEC WALIDACJI JƒòZYKA ---

        // Przycinanie odpowiedzi, je≈õli przekracza zadanƒÖ maksymalnƒÖ d≈Çugo≈õƒá.
        if (answer.length > settings.maxLength) {
           answer = answer.substring(0, settings.maxLength - 3) + "..."; // Dodanie wielokropka.
        }

        // Obs≈Çuga blokowania wzmianek.
        finalMessage = settings.blockMentions ? answer.replace(/@everyone|@here|<@!?\d+>|<@&\d+>/gi, "[Wzmianka]") : answer;
      } else {
        // Komunikat, je≈õli odpowied≈∫ z API jest pusta lub w nieprawid≈Çowym formacie.
        console.error("[AI Chat] Odpowied≈∫ z API nie zawiera≈Ça oczekiwanej tre≈õci lub by≈Ça pusta. Otrzymany wynik:", result);
        throw new Error("Otrzymano pustƒÖ lub nieprawid≈ÇowƒÖ odpowied≈∫ od us≈Çugi AI.");
      }

    } catch (e) {
      // Blok catch obs≈Çuguje wszystkie b≈Çƒôdy, kt√≥re mogƒÖ wystƒÖpiƒá w bloku try.

      // Specyficzne komunikaty o b≈Çƒôdach dla brakujƒÖcych pakiet√≥w.
      if (e.message.includes("Cannot find module 'franc'")) {
          finalMessage = "B≈ÇƒÖd krytyczny: Pakiet 'franc' do weryfikacji jƒôzyka nie jest zainstalowany. Popro≈õ administratora o instalacjƒô (`npm install franc`).";
          console.error(finalMessage); // Logowanie b≈Çƒôdu do konsoli serwera.
      } else if (e.message.includes("Cannot find module 'node-fetch'")) {
          finalMessage = "B≈ÇƒÖd krytyczny: Pakiet 'node-fetch' nie jest zainstalowany. Popro≈õ administratora o instalacjƒô (`npm install node-fetch`).";
          console.error(finalMessage);
      } else {
          // Obs≈Çuga pozosta≈Çych b≈Çƒôd√≥w.
          // Sprawdzamy, czy b≈ÇƒÖd jest przeznaczony dla u≈ºytkownika (np. b≈ÇƒÖd konfiguracji, przekierowanie).
          const isUserFacingError = e.message.startsWith("B≈ÇƒÖd konfiguracji:") || e.message.startsWith("Zapytania dotyczƒÖce zakupu") || e.message.includes("Otrzymano odpowied≈∫ w nieprawid≈Çowym jƒôzyku");
          if (isUserFacingError) {
              finalMessage = e.message; // U≈ºywamy wiadomo≈õci b≈Çƒôdu bezpo≈õrednio.
          } else {
              // Dla b≈Çƒôd√≥w technicznych, logujemy je i wysy≈Çamy og√≥lny komunikat.
              console.error("[AI Chat] Szczeg√≥≈Çy b≈Çƒôdu technicznego:", e.message, "\nStack:", e.stack);
              // Je≈õli b≈ÇƒÖd dotyczy us≈Çugi AI lub po≈ÇƒÖczenia, przekazujemy jego komunikat.
              if (e.message.includes("Us≈Çuga AI") || e.message.includes("po≈ÇƒÖczenia") || e.message.includes("API zwr√≥ci≈Ço b≈ÇƒÖd")) {
                  finalMessage = e.message;
              } else {
                  // Og√≥lny komunikat dla innych b≈Çƒôd√≥w technicznych.
                  finalMessage = "WystƒÖpi≈Ç nieoczekiwany b≈ÇƒÖd techniczny podczas przetwarzania zapytania. Szczeg√≥≈Çy w konsoli.";
              }
          }
      }
    } finally {
        // Niezale≈ºnie od tego, czy wystƒÖpi≈Ç b≈ÇƒÖd, czy nie, pr√≥bujemy wys≈Çaƒá ostatecznƒÖ odpowied≈∫.
        await interaction.editReply({ content: finalMessage, embeds: [], components: [] }).catch(e => {
            // Obs≈Çuga b≈Çƒôd√≥w podczas edycji odpowiedzi (np. je≈õli interakcja ju≈º wygas≈Ça).
            console.error("AI Chat: Nie uda≈Ço siƒô wys≈Çaƒá ostatecznej wiadomo≈õci interakcji:", e);
        });
    }
  },

  // Funkcja mod, kt√≥ra jest pusty w tym przypadku.
  mod() {},
};